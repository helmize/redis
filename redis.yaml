apiVersion: v1
data:
  ping_local.sh: |-
    response=$(
      timeout -s 9 $1 \
      redis-cli \
        -a $REDIS_PASSWORD \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_local.sh" $1 || exit_status=$?
    "$script_dir/ping_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_master.sh: |-
    response=$(
      timeout -s 9 $1 \
      redis-cli \
        -a $REDIS_MASTER_PASSWORD \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
kind: ConfigMap
metadata:
  labels:
    app: redis
    release: redis
  name: redis-health
---
apiVersion: v1
data:
  master.conf: |-
    dir /data
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
  redis.conf: |-
    # User-supplied configuration:
    # maxmemory-policy volatile-lru
  replica.conf: |-
    dir /data
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
kind: ConfigMap
metadata:
  labels:
    app: redis
    release: redis
  name: redis
---
apiVersion: v1
data:
  redis-password: Q1dLY1JyN0w3VQ==
kind: Secret
metadata:
  labels:
    app: redis
    release: redis
  name: redis
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: redis
    release: redis
  name: redis-master
spec:
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  selector:
    app: redis
    release: redis
    role: master
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: redis
    release: redis
  name: redis-slave
spec:
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  selector:
    app: redis
    release: redis
    role: slave
  type: ClusterIP
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: redis
    release: redis
  name: redis-slave
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
      release: redis
      role: slave
  template:
    metadata:
      annotations:
        checksum/configmap: 01332e6042302212019e43804f4a537b3ea98b114164444e4a816c2c7f14847b
        checksum/health: 40c8a036dae57da49697db0b89e2eff43e6aec4100c09912d18d0cd17110b777
        checksum/secret: afee6caae2f9e6e395cd65d62f1edf140fee84300e3d123a4e52189224614747
      labels:
        app: redis
        chart: redis-6.4.4
        release: redis
        role: slave
    spec:
      containers:
      - command:
        - /bin/bash
        - -c
        - |
          if [[ -n $REDIS_PASSWORD_FILE ]]; then
            password_aux=`cat ${REDIS_PASSWORD_FILE}`
            export REDIS_PASSWORD=$password_aux
          fi
          if [[ -n $REDIS_MASTER_PASSWORD_FILE ]]; then
            password_aux=`cat ${REDIS_MASTER_PASSWORD_FILE}`
            export REDIS_MASTER_PASSWORD=$password_aux
          fi
          ARGS=("--port" "${REDIS_PORT}")
          ARGS+=("--requirepass" "${REDIS_PASSWORD}")
          ARGS+=("--slaveof" "${REDIS_MASTER_HOST}" "${REDIS_MASTER_PORT_NUMBER}")
          ARGS+=("--masterauth" "${REDIS_MASTER_PASSWORD}")
          ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
          ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
          /run.sh "${ARGS[@]}"
        env:
        - name: REDIS_REPLICATION_MODE
          value: slave
        - name: REDIS_MASTER_HOST
          value: redis-master
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_MASTER_PORT_NUMBER
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redis-password
              name: redis
        - name: REDIS_MASTER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redis-password
              name: redis
        image: docker.io/bitnami/redis:4.0.14
        imagePullPolicy: Always
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_local_and_master.sh 5
          failureThreshold: 5
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        name: redis
        ports:
        - containerPort: 6379
          name: redis
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_local_and_master.sh 1
          failureThreshold: 5
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources: null
        securityContext:
          runAsUser: 1001
        volumeMounts:
        - mountPath: /health
          name: health
        - mountPath: /data
          name: redis-data
        - mountPath: /opt/bitnami/redis/etc
          name: config
      securityContext:
        fsGroup: 1001
      serviceAccountName: default
      volumes:
      - configMap:
          defaultMode: 493
          name: redis-health
        name: health
      - configMap:
          name: redis
        name: config
      - emptyDir: {}
        name: redis-data
---
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  labels:
    app: redis
    release: redis
  name: redis-master
spec:
  selector:
    matchLabels:
      app: redis
      release: redis
      role: master
  serviceName: redis-master
  template:
    metadata:
      annotations:
        checksum/configmap: 01332e6042302212019e43804f4a537b3ea98b114164444e4a816c2c7f14847b
        checksum/health: 40c8a036dae57da49697db0b89e2eff43e6aec4100c09912d18d0cd17110b777
        checksum/secret: 6cd828f9776268c9f1a20bf27397b0f3cad1aa0f79e74c086ca39998e7ef6202
      labels:
        app: redis
        chart: redis-6.4.4
        release: redis
        role: master
    spec:
      containers:
      - command:
        - /bin/bash
        - -c
        - |
          if [[ -n $REDIS_PASSWORD_FILE ]]; then
            password_aux=`cat ${REDIS_PASSWORD_FILE}`
            export REDIS_PASSWORD=$password_aux
          fi
          ARGS=("--port" "${REDIS_PORT}")
          ARGS+=("--requirepass" "${REDIS_PASSWORD}")
          ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
          ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
          /run.sh ${ARGS[@]}
        env:
        - name: REDIS_REPLICATION_MODE
          value: master
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redis-password
              name: redis
        - name: REDIS_PORT
          value: "6379"
        image: docker.io/bitnami/redis:4.0.14
        imagePullPolicy: Always
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_local.sh 5
          failureThreshold: 5
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        name: redis
        ports:
        - containerPort: 6379
          name: redis
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_local.sh 5
          failureThreshold: 5
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources: null
        securityContext:
          runAsUser: 1001
        volumeMounts:
        - mountPath: /health
          name: health
        - mountPath: /data
          name: redis-data
          subPath: null
        - mountPath: /opt/bitnami/redis/etc
          name: config
      securityContext:
        fsGroup: 1001
      serviceAccountName: default
      volumes:
      - configMap:
          defaultMode: 493
          name: redis-health
        name: health
      - configMap:
          name: redis
        name: config
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      labels:
        app: redis
        component: master
        heritage: Tiller
        release: redis
      name: redis-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi
